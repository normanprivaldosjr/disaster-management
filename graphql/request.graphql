extend type Query @guard(with: ["api"]) {
    requests(
        group_id: ID @scope(name: "byGroup")
        status_id: ID @scope(name: "byStatus")
        priorities: [ID] @scope(name: "byPriority")
    ): [Request!]! @paginate
    request(id: ID @eq): Request @find
}

extend type Mutation @guard(with: ["api"]) {
    createRequest(input: CreateRequestInput @spread): RequestResponse @field(resolver: "RequestMutator@create")
    updateRequest(input: UpdateRequestInput @spread): RequestResponse @field(resolver: "RequestMutator@update")
    deleteRequest(id: ID!): RequestResponse @field(resolver: "RequestMutator@delete")
}

type Request {
    id: ID
    user: User @belongsTo
    status: Status @belongsTo
    source: Source @belongsTo
    group: Group @belongsTo
    priorities: [Priority] @belongsToMany
    name: String
    number_to_be_rescued: Int
    address: String
    contact_number: String
    created_at: DateTime
    updated_at: DateTime
}

type RequestResponse {
    status: String
    message: String
    data: Request
}

input CreateRequestInput {
    status_id: ID!
    source_id: ID!
    group_id: ID!
    number_to_be_rescued: Int
    name: String!
    address: String!
    contact_number: String!
    priorities: [ID]
}

input UpdateRequestInput {
    id: ID!
    user_id: ID
    status_id: ID
    source_id: ID
    group_id: ID
    number_to_be_rescued: Int
    name: String
    address: String
    contact_number: String
    priorities: [ID]
}
extend type Query @guard(with: ["api"]) {
    groups: [Group!]! @all
    group(id: ID @eq): Group @find
}

extend type Mutation @guard(with: ["api"]) {
    createGroup(input: CreateGroupInput @spread): GroupResponse @field(resolver: "GroupMutator@create")
    updateGroup(input: UpdateGroupInput @spread): GroupResponse @field(resolver: "GroupMutator@update")
    joinGroup(input: JoinGroupInput @spread): GroupResponse @field(resolver: "GroupMutator@join")
    leaveGroup(input: JoinGroupInput @spread): GroupResponse @field(resolver: "GroupMutator@leave")
}

type Group {
    id: ID
    name: String
    users: [User] @belongsToMany
    region: Region
    requestCount: Int @count(relation: "newRequests")
    created_at: DateTime
    updated_at: DateTime
}

type GroupResponse {
    status: String
    message: String
    data: Group
}

input CreateGroupInput {
    region_id: ID!
    name: String!
}

input UpdateGroupInput {
    group_id: ID!
    region_id: ID
    name: String
}

input JoinGroupInput {
    group_id: ID!
}